apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: main
  namespace: monitoring
  labels:
    prometheus: main
spec:
  version: v3.4.1
  replicas: 2
  serviceAccountName: prometheus
  serviceMonitorSelector:
    matchLabels:
      prometheus: main
  serviceMonitorNamespaceSelector:
    matchLabels:
      monitoring: prometheus
  resources:
    requests:
      cpu: 500m
      memory: 2Gi
    limits:
      cpu: 500m
      memory: 2Gi
  logLevel: info
  logFormat: logfmt
  retention: 7d
  scrapeInterval: 15s
  securityContext:
    fsGroup: 0
    runAsNonRoot: false
    runAsUser: 0    
  storage:
    volumeClaimTemplate:
      spec:
        storageClassName: gp3-monitoring
        resources:
          requests:
            storage: 20Gi
  topologySpreadConstraints:
  - maxSkew: 2   # 1 | 2 | 3
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: DoNotSchedule # DoNotSchedule | ScheduleAnyway
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: prometheus          
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: eks.amazonaws.com/nodegroup
            operator: In
            values:
            - main-ng
    # podAntiAffinity:
    #   preferredDuringSchedulingIgnoredDuringExecution:
    #   - podAffinityTerm:
    #       labelSelector:
    #         matchExpressions:
    #         - key: app.kubernetes.io/name
    #           operator: In
    #           values:
    #           - prometheus
    #       topologyKey: kubernetes.io/hostname
    #     weight: 100 
       
# Don't use podAntiAffinity with topologySpreadConstraints
# topologySpreadConstraints is a more stable option for EKS
